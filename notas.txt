Inversión de Control (IC) -> principio de Hollywood

- Proporciona modularidad
- Permite ampliar la funcionalidad de nuestras aplicaciones sin modificar las clases
- Evita la dependencia entre las clases
- Flexibiliza nuestras aplicaciones haciéndolas más configurables

Archivo de Configuración: Se crea de las siguientes formas:
- Archivo de configuración XML
- Java Source Code
- Java Annotations



Formas de Crear Inyección de Dependencias (Depedendy Inyection):
- Mediante Constructor: en la clase q lo necesite.
	* Crear la clase e interfaz de la dependencia (IInforme)
	* Creación de Constructor en la clase para la inyección de la dependencia
	* Configurar la inyección de dependencia en archivo XML (ApplicationContext.xml)

- Mediante un setter:
	* Crear la clase e interfaz de la dependencia (IInforme)
	* Creación de Constructor en la clase para la inyección de la dependencia
	* Configurar la inyección de dependencia en archivo XML (ApplicationContext.xml)

Patrones de Diseño:
* Singleton: Tiene como objetivo asegurar q solo haya una instancia u objeto por clase y un punto de acceso global a ella.
	- Por qué es necesario:
		En determinados escenarios debemos asegurarnos que que las clases controlan y gestionan el acceso a un único recurso (ej. fichero abierto).
		En otro escenarios la necesidad es que diferentes objetos de la aplicación puedan acceder a un tipo de dato en concreto.
	- Ventajas:
		Control estricto de cómo se acceden a las instancias
		Espacio de nombres reducido (mayor claridad de código)
		Mejor desempeño de la herencia
	
	Spring utiliza Singleton por defecto.


* Prototype: Tiene como objetivo la creación de varios objetos a partir de un modelo o prototipo. Esto lo hace mediante la clonación de objetos o instancias creadas previamente. Siempre es más óptimo (recursos) clonar un objeto que crear uno nuevo. El objeto clonado tendrá sus propios valores desde setters.
	- Por qué es necesario:
		En determinados escenarios que surgen a la hora de programar se necesitan varios objetos con atributos repetidos (comunes)

	- Ventajas:
		Una aplicación puede crear y eliminar objetos en tiempo de ejecución (esto no lo permiten otros Patrones de Diseño)
		Permite crear nuevos objetos variando los ya existentes con el consiguiente ahorro de tiempo y recursos.
		Clonar siempre es más rápido que crear.

	Spring utiliza Singleton por defecto, pero también puede usar este patrón.


Ciclo de Vida de los Beans
- Ejecutar tareas a realizar antes de creación de Bean
- Ejecutar tareas a realizar después de creación de Bean

Contenedor Spring Iniciado -> Instanciación de Bean -> Inyección de Dependencias -> Procesado del Bean -> Método Init -> Bean listo para su uso ->  Contenedor Spring Apagado -> Método Destroy

	+ Método Init: Dependencias de otros beans, Activación retardada de servicios (abrir socket, conexión BD), etc.
	+ Método Destroy: Liberar recursos, Cerrar conexiones con BD.


Java Annotations
	Son etiquetas que se añaden a nuestras clases, métodos, campos, variables, etc. en un programa Java
	Para qué Sirven.
		+ Para añadir metadatos a nuestros programas (clases) en Java
		+ Qué son los metadatos: Un conjunto de datos que describen el contenido y/o propósito de un objeto.
	Poder describir la naturaleza de un objeto (metadatos) con Annotations nos permite utilizarlas como sustituto de los archivos XML.
	Las Annotations son procesadas en tiempo de compilación o también en tiempo de ejecución.

	Spring escanea el código de todas nuestras clases en busca de Annotations:
		- Hay que preparar el XML para que Spring escanee nuestro código.
	Cuando encuentra un Annotations, registra el bean de forma automática en el contenedor.

	Ventajas:
	+ Mayor facilidad a la hora de configurar los beans
	+ Simplifica enormemente el archivo de configuración XML
	+ Especialmente útil cuando debemos de configurar cientos de beans en un programa.

	Pasos a seguir para utlilizar Annotations:
	+ preparar el XML para que Spring escanee nuestro código (clases)
	+ agregar Annotations a nuestra clase Java
	+ Pedir el bean al contenedor

	
	Autowired:
	- Inyección de Dependencias con Constructor
		+ Crear la clase + interfaz a inyectar (dependencia)
		+ Crear Constructor para inyección en clase que lo solicite
		+ Configurar la dependencia con @Autowired

	- Inyección de Dependencias con setter, método y campo de clase


	Qualifier:
	- Especificar bean ID cuando sea necesario

	@PostConstruct y @PreDestroy
	Ejecutar tareas a realizar antes de creación de Bean, ejecutar tareas a realizar después de creación de Bean con Annotations.

	@Configuration: Cómo configurar Spring con código Java prescindiendo de XML.


